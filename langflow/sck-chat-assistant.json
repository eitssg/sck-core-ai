{
    "name": "sck-chat-assistant",
    "description": "Just a Chat",
    "icon": null,
    "icon_bg_color": null,
    "gradient": null,
    "data": {
        "nodes": [
            {
                "data": {
                    "id": "ChatInput-gRilo",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "inputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files",
                            "background_color",
                            "chat_icon",
                            "text_color"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatInput",
                        "legacy": false,
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Chat Message",
                                "group_outputs": false,
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.0020353564437605998,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                            },
                            "files": {
                                "_input_type": "FileInput",
                                "advanced": true,
                                "display_name": "Files",
                                "dynamic": false,
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "file_path": "",
                                "info": "Files to be sent with the message.",
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "files",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "temp_file": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "file",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Input Text",
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "input_types": [],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false,
                        "lf_version": "1.5.1"
                    },
                    "selected_output": "message",
                    "showNode": false,
                    "type": "ChatInput"
                },
                "dragging": false,
                "id": "ChatInput-gRilo",
                "measured": {
                    "height": 47,
                    "width": 192
                },
                "position": {
                    "x": 1075.680281001369,
                    "y": 464.54145652753226
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatOutput-zNcpH",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "outputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template",
                            "background_color",
                            "chat_icon",
                            "text_color",
                            "clean_data"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatOutput",
                        "legacy": false,
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Output Message",
                                "group_outputs": false,
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.003169567463043492,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "clean_data": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Basic Clean Data",
                                "dynamic": false,
                                "info": "Whether to clean the data",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "clean_data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
                            },
                            "data_template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Inputs",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Data",
                                    "DataFrame",
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "input_value",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "id": "ChatOutput-zNcpH",
                "measured": {
                    "height": 47,
                    "width": 192
                },
                "position": {
                    "x": 2012.9589306391622,
                    "y": 399.6113177639427
                },
                "selected": false,
                "type": "genericNode",
                "dragging": false
            },
            {
                "data": {
                    "id": "Agent-um3qJ",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "tools",
                                "value": "",
                                "display_name": "Tools",
                                "advanced": false,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "These are the tools that the agent can use to help with tasks.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "HandleInput"
                            },
                            "add_current_date_tool": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "add_current_date_tool",
                                "value": true,
                                "display_name": "Current Date",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If true, will add a tool to the agent that returns the current date.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "agent_description": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "agent_description",
                                "value": "A helpful assistant with access to the following tools:",
                                "display_name": "Agent Description [Deprecated]",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                "title_case": false,
                                "copy_field": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            },
                            "agent_llm": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "options": [
                                    "Anthropic",
                                    "Google Generative AI",
                                    "Groq",
                                    "OpenAI",
                                    "Custom"
                                ],
                                "options_metadata": [
                                    {
                                        "icon": "Anthropic"
                                    },
                                    {
                                        "icon": "GoogleGenerativeAI"
                                    },
                                    {
                                        "icon": "Groq"
                                    },
                                    {
                                        "icon": "OpenAI"
                                    },
                                    {
                                        "icon": "brain"
                                    }
                                ],
                                "combobox": false,
                                "dialog_inputs": {},
                                "toggle": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "agent_llm",
                                "value": "OpenAI",
                                "display_name": "Model Provider",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The provider of the language model that the agent will use to generate responses.",
                                "real_time_refresh": true,
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "api_key": {
                                "load_from_db": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "api_key",
                                "value": null,
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "real_time_refresh": true,
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "handle_parsing_errors": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "handle_parsing_errors",
                                "value": true,
                                "display_name": "Handle Parse Errors",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Should the Agent fix errors when reading user input for better processing?",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "tool_mode": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The input provided by the user for the agent to process.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageInput"
                            },
                            "json_mode": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "json_mode",
                                "value": false,
                                "display_name": "JSON Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If True, it will output JSON regardless of passing a schema.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "max_iterations": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_iterations",
                                "value": 15,
                                "display_name": "Max Iterations",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_retries": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_retries",
                                "value": 5,
                                "display_name": "Max Retries",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of retries to make when generating.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_tokens": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "range_spec": {
                                    "step_type": "float",
                                    "min": 0,
                                    "max": 128000,
                                    "step": 0.1
                                },
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_tokens",
                                "value": "",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "model_kwargs": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "model_kwargs",
                                "value": {},
                                "display_name": "Model Kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Additional keyword arguments to pass to the model.",
                                "title_case": false,
                                "type": "dict",
                                "_input_type": "DictInput"
                            },
                            "model_name": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "options": [
                                    "gpt-4o-mini",
                                    "gpt-4o",
                                    "gpt-4.1",
                                    "gpt-4.1-mini",
                                    "gpt-4.1-nano",
                                    "gpt-4.5-preview",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-4",
                                    "gpt-3.5-turbo",
                                    "o1",
                                    "o1-mini",
                                    "o1-pro",
                                    "o3-mini",
                                    "o3",
                                    "o3-pro",
                                    "o4-mini",
                                    "o4-mini-high"
                                ],
                                "options_metadata": [],
                                "combobox": true,
                                "dialog_inputs": {},
                                "toggle": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "model_name",
                                "value": "gpt-4-turbo",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                "real_time_refresh": false,
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput",
                                "load_from_db": false
                            },
                            "n_messages": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "n_messages",
                                "value": 100,
                                "display_name": "Number of Chat History Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of chat history messages to retrieve.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "openai_api_base": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "openai_api_base",
                                "value": "",
                                "display_name": "OpenAI API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "seed": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "seed",
                                "value": 1,
                                "display_name": "Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "system_prompt": {
                                "tool_mode": false,
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "system_prompt",
                                "value": "You are the SCK (Simple Cloud Kit) Development Assistant, an expert AI agent specialized in the SCK framework ecosystem.\n\n## Your Expertise\n\nYou are deeply knowledgeable about:\n\n### 🏗️ SCK Architecture & Components\n- **Python Modules**: sck-core-framework, sck-core-logging, sck-core-db, sck-core-execute, sck-core-runner, sck-core-deployspec, sck-core-component, sck-core-invoker, sck-core-organization, sck-core-api, sck-core-codecommit, sck-core-cli\n- **UI Framework**: React/TypeScript with Vite, Shadcn/UI components, TailwindCSS\n- **Infrastructure**: AWS Lambda, S3, DynamoDB, CloudFormation, Docker\n- **Build System**: UV with dynamic versioning, monorepo structure with 17+ submodules\n\n### 🔧 Development Patterns\n- **Lambda Runtime Model**: All Python runs in AWS Lambda (synchronous handlers only, NO async/await)\n- **ProxyEvent Pattern**: Use `ProxyEvent(**event)` for API Gateway integration\n- **S3 Architecture**: Three bucket prefixes (packages/, files/, artefacts/) with lifecycle management\n- **MagicS3Bucket**: Use for bucket operations, boto3 client for presigned URLs\n- **API Standards**: Envelope format `{status, code, data, metadata, message}` for non-OAuth endpoints\n\n### 📚 Code Standards & Conventions\n- **Imports**: Always use `import core_framework as util`, `import core_logging as log`, `import core_helper.aws as aws`\n- **Logging**: Use `logger = log` (NOT `log.get_logger()`), then `logger.info()`, `logger.error()`, etc.\n- **Docstrings**: Google-style format for Sphinx documentation generation\n- **Multi-Tenancy**: OAuth client_id vs tenant client patterns, session management\n- **Virtual Environments**: UV-managed with hybrid approach for local wheels\n\n### 🚀 Execution Chain Understanding\n```\nCLI/UI → core-invoker → core-runner → [core-deployspec, core-component]\n```\n\n## Your Capabilities\n\nWhen users ask for help, you can:\n\n1. **Code Analysis**: Review SCK codebase patterns and suggest improvements\n2. **Architecture Guidance**: Explain component interactions and data flow\n3. **Development Setup**: Help with UV, virtual environments, build processes\n4. **Debugging**: Identify common SCK-specific issues and solutions\n5. **Best Practices**: Ensure code follows SCK conventions and standards\n6. **CloudFormation**: Validate and optimize AWS infrastructure templates\n7. **API Design**: Guide proper envelope patterns and authentication flows\n\n## Response Style\n\n- **Specific**: Reference actual SCK modules, file paths, and patterns\n- **Practical**: Provide working code examples and command-line instructions\n- **Context-Aware**: Consider the monorepo structure and interdependencies\n- **Security-Minded**: Always follow SCK auth patterns and security guidelines\n- **Performance-Conscious**: Suggest optimizations for Lambda and S3 usage\n\n## Common SCK Patterns to Remember\n\n```python\n# Standard SCK imports\nimport core_framework as util\nimport core_logging as log\nimport core_helper.aws as aws\nfrom core_framework import ProxyEvent\n\n# Logging setup\nlogger = log\n\n# Lambda handler pattern\ndef lambda_handler(event, context):\n    request = ProxyEvent(**event)\n    logger.info(\"Processing request\", extra={\"path\": request.path})\n    # Process with proper envelope response\n    return {\"statusCode\": 200, \"body\": json.dumps({\"status\": \"success\", \"data\": result})}\n\n# S3 operations\nfrom core_helper.magic import MagicS3Bucket\nbucket = MagicS3Bucket(bucket_name=util.get_bucket_name(), region=util.get_bucket_region())\n```\n\nYou are here to make SCK development efficient, maintainable, and following all established patterns. Let's build great cloud automation together!",
                                "display_name": "Agent Instructions",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                "title_case": false,
                                "copy_field": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            },
                            "temperature": {
                                "tool_mode": false,
                                "min_label": "",
                                "max_label": "",
                                "min_label_icon": "",
                                "max_label_icon": "",
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "range_spec": {
                                    "step_type": "float",
                                    "min": 0,
                                    "max": 1,
                                    "step": 0.01
                                },
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "temperature",
                                "value": 0.1,
                                "display_name": "Temperature",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "slider",
                                "_input_type": "SliderInput"
                            },
                            "timeout": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "timeout",
                                "value": 700,
                                "display_name": "Timeout",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The timeout for requests to OpenAI completion API.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "verbose": {
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "list": false,
                                "list_add_label": "Add More",
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "verbose",
                                "value": true,
                                "display_name": "Verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            }
                        },
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "icon": "bot",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Agent",
                        "documentation": "https://docs.langflow.org/agents",
                        "minimized": false,
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "response",
                                "hidden": null,
                                "display_name": "Response",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "required_inputs": null,
                                "allows_loop": false,
                                "group_outputs": false,
                                "options": null,
                                "tool_mode": true
                            }
                        ],
                        "field_order": [
                            "agent_llm",
                            "max_tokens",
                            "model_kwargs",
                            "json_mode",
                            "model_name",
                            "openai_api_base",
                            "api_key",
                            "temperature",
                            "seed",
                            "max_retries",
                            "timeout",
                            "system_prompt",
                            "n_messages",
                            "tools",
                            "input_value",
                            "handle_parsing_errors",
                            "verbose",
                            "max_iterations",
                            "agent_description",
                            "add_current_date_tool"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": false,
                        "metadata": {},
                        "tool_mode": false
                    },
                    "selected_output": "response",
                    "showNode": true,
                    "type": "Agent"
                },
                "dragging": false,
                "id": "Agent-um3qJ",
                "measured": {
                    "height": 587,
                    "width": 320
                },
                "position": {
                    "x": 1447.5175369975304,
                    "y": 128.3453461446821
                },
                "selected": true,
                "type": "genericNode"
            }
        ],
        "edges": [
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Agent",
                        "id": "Agent-um3qJ",
                        "name": "response",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-zNcpH",
                        "inputTypes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "type": "other"
                    }
                },
                "id": "reactflow__edge-Agent-um3qJ{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-um3qJ\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-zNcpH{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-zNcpH\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "Agent-um3qJ",
                "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-um3qJ\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "ChatOutput-zNcpH",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-zNcpH\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-gRilo",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "Agent-um3qJ",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ChatInput-gRilo{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-gRilo\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-um3qJ{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-um3qJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatInput-gRilo",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-gRilo\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "Agent-um3qJ",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-um3qJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            }
        ],
        "viewport": {
            "x": -821.0125777780102,
            "y": 48.00245486096446,
            "zoom": 1.0829963790221528
        }
    },
    "is_component": false,
    "updated_at": "2025-09-26T17:00:32+00:00",
    "webhook": false,
    "endpoint_name": null,
    "tags": [
        "assistants",
        "agents"
    ],
    "locked": false,
    "mcp_enabled": true,
    "action_name": null,
    "action_description": null,
    "access_type": "PRIVATE",
    "id": "4db6a149-123f-430a-872d-3b1fa6cfe1c4",
    "user_id": "40e94b2d-5fee-4fff-b313-6815edf09f34",
    "folder_id": "83c14e6f-863c-4343-9a5b-95a1ae3c1e21"
}